@{
    ViewData["Title"] = "Home Page";
}
<style>
    pre {
        background-color: aliceblue;
    }
</style>

<div id="create">
    <h4>Create (Oluşturmak) İşlemi:  </h4>
<pre>

[HttpPost]
public JsonResult AddProduct([FromBody]Product product)
{
    // Yeni bir Product nesnesi oluşturuluyor ve bu nesne, AJAX isteğiyle gelen JSON verileri ile dolduruluyor.
    var data = new Product()
    {
        ProductName = product.ProductName,
        CategoryId = product.CategoryId,
        BrandId = product.BrandId,
        Description = product.Description,
    };

    // Veritabanına yeni ürün ekleniyor.
    db.Products.Add(data);
    db.SaveChanges(); // Değişiklikler veritabanına kaydediliyor.

    // Sonuç JSON olarak döndürülüyor ve istemciye eklemenin başarılı olduğu bilgisi gönderiliyor.
    return new JsonResult("Veri kaydedildi!!!!");
}
</pre>
    <p>
        Bu kod parçası, yeni bir ürünün oluşturulmasını ve veritabanına eklenmesini temsil eder. AJAX isteğiyle gelen veriler bir Product nesnesine atanır ve bu nesne veritabanına eklenir.
    </p>
</div>

<div id="read">
    <h4>Read (Okumak) İşlemi: </h4>
    <pre>
        C#

        public JsonResult ProductList()
        {
            // Veritabanından tüm ürünler alınıyor ve JSON olarak döndürülüyor.
            var data = db.Products.ToList();
            return new JsonResult(data);
        }
    </pre>
    <pre>
        Javascript

        function ShowData() {
    // AJAX isteğiyle, veritabanından tüm ürünler çekilir ve bu veriler HTML tabloya doldurulur.
    $.ajax({
        url: '/Home/ProductList',
        type: 'Get',
        dataType: 'Json',
        contentType: 'application/json;charset=utf-8;',
        success: function (result, status, xhr) {
            var table_data = '';

            // Çekilen veriler döngüyle işlenir ve HTML tabloya eklenir.
            $.each(result, function (index, item) {
                // ...
            });

            // Tablo verileri HTML içeriğine yerleştirilir.
            $('#table-body').html(table_data);
        },
        error: function () {
            // İşlem başarısız ise hata mesajı gösterilir.
            alert('Veri gösterilemiyor :( ')
        }
    });
}

    </pre>
    <p>Bu kodlar, tüm ürünlerin veritabanından çekilmesini ve HTML tablosuna yerleştirilmesini temsil eder. Veriler AJAX ile sunucudan alınır ve HTML içeriğine yerleştirilir.</p>
</div>

<div id="update">
    <h4>
        Update (Güncellemek) İşlemi:
    </h4>
    <pre>
        C#
        [HttpPost]
        public JsonResult UpdateProduct([FromBody] Product product)
        {
            // Güncellenecek ürün verisi alınır ve veritabanında güncellenir.
            db.Products.Update(product);
            db.SaveChanges();
            // Sonuç JSON olarak döndürülür.
            return new JsonResult("Veri güncellendi");
        }
    </pre>
    <pre>
        Javascript

        function UpdateData() {
    // Kullanıcının girdiği güncellenmiş ürün bilgileri alınır.
    var obj = {
        Id: $('#upd_Id').val(),
        name: $('#upd_name').val(),
        categoryId: $('#upd_category').val(),
        brandId: $('#upd_brand').val(),
        description: $('#upd_description').val()
    }
    // AJAX isteği ile güncellenmiş ürün verisi sunucuya gönderilir.
    $.ajax({
        url: '/Home/UpdateProduct',
        type: 'Post',
        data: JSON.stringify(obj),
        contentType: 'application/json; charset=utf-8',
        dataType: 'JSON',
        success: function () {
            // İşlem başarılı ise veriler yeniden gösterilir ve güncelleme modal penceresi kapatılır.
            ShowData();
            $('#UpdateMdl').modal('hide');
        },
        error: function () {
            // İşlem başarısız ise hata mesajı gösterilir.
            alert('Ekleme işlemi başarısız');
        }
    })
}

    </pre>
</div>

<div id="delete">
    <h4>Delete (Silme) İşlemi:</h4>
    <pre>CSharp

        public JsonResult DeleteProduct(int id)
        {
            // Belirtilen ürün verisi veritabanından silinir.
            var deletedData = db.Products.Where(x => x.ProductId == id).SingleOrDefault();
            db.Products.Remove(deletedData);
            db.SaveChanges();
            // Sonuç JSON olarak döndürülür.
            return new JsonResult("Veri silindi");
        }

    </pre>
    <pre>
        Javascript

        function Delete(id) {
    // Kullanıcıdan silme işlemini onaylaması istenir.
    if (confirm("Bu veriyi silmek istediğinize emin misiniz?")) {
        // Silme işlemi AJAX ile sunucuya gönderilir.
        $.ajax({
            url: '/Home/DeleteProduct?id=' + id,
            success: function () {
                // İşlem başarılı ise veriler yeniden gösterilir.
                ShowData();
            },
            error: function () {
                // İşlem başarısız ise hata mesajı gösterilir.
                alert('İşlem başarısız');
            }
        })
    }
}

    </pre>
</div>